package com.company.exercises.parenthesies;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Stack;

public class Parenthesis {

	/*
	 * Given a string made up of the following 6 characters ( ) { } [ ]
	 * determine if it is well-formed or not. Well-formed meaning Parentheses,
	 * braces and brackets match in nested pairs. Your program should accept as
	 * its first argument a path to a filename. Each line in this file contains
	 * a string comprising the characters mentioned above. e.g. ({[()]}) ([)]
	 * Print out True or False if the string is well-formed e.g. for the example
	 * above: True False
	 */
	
	private static final String AOL_TXT_PARENTHESIES = "/home/ubuntu/Desktop/aol.txt";

	public static void main(String args[]) throws IOException {
		checkParenthesis(AOL_TXT_PARENTHESIES);
	}

	public static boolean checkParenthesis(String fileLocation)
			throws IOException {

		File file = new File(fileLocation);

		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(file));

			String line = null;

			while ((line = br.readLine()) != null) {
				
				int result = checkCharacters(line);
				
				if(result == 1){
					System.out.println("true");
				}
				else{
					System.out.println("false");
				}
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			br.close();
		}

		return false;

	}

	private static int checkCharacters(String line) {
		//System.out.println(line);

		//Stack is already provided by the JDK
		Stack<Character> stack = new Stack<Character>();


		char currentCharacter = ' ';

		for (int i = 0; i < line.length(); i++) 
		{
			
			currentCharacter = line.charAt(i);

			if (currentCharacter == '(' || currentCharacter == '{' || currentCharacter == '[') 
			{
				stack.push(currentCharacter);
			} 
			else if (currentCharacter == ')' && !stack.empty()) 
			{
				if (stack.peek() == '(') {
					stack.pop();
				}
			}
			else if (currentCharacter == '}' && !stack.empty()) 
			{
				if (stack.peek() == '{') {
					stack.pop();
				}
			}
			else if (currentCharacter == ']' && !stack.empty()) 
			{
				if (stack.peek() == '[') 
				{
					stack.pop();
				}
			}

			else if (currentCharacter == ')' || currentCharacter == '}' || currentCharacter == ']') {
				return 0;
			}

		}
		if (!stack.empty()){
			return 0;
		}
		else{
			return 1;
		}
		
		

	}
}
