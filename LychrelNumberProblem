package com.company.exercises.addition;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Random;
import java.util.Scanner;

public class Pallindrome {

	private static final long MAX_NUMBER = 4294967295L;
	private static final String RANDOM_NUMBERS_FILE = "/home/ubuntu/Desktop/aol1.txt";

	/*
	 * The problem is as follows: choose a number, reverse its digits and add it
	 * to the original. If the sum is not a palindrome (which means, it is not
	 * the same number from left to right and right to left), repeat this
	 * procedure. eg. 195 (initial number) + 591 (reverse of initial number) =
	 * 786 786 + 687 = 1473 1473 + 3741 = 5214 5214 + 4125 = 9339 (palindrome)
	 * In this particular case the palindrome 9339 appeared after the 4th
	 * addition. This method leads to palindromes in a few step for almost all
	 * of the integers. But there are interesting exceptions. 196 is the first
	 * number for which no palindrome has been found. It is not proven though,
	 * that there is no such a palindrome. Your program should accept as its
	 * first argument a path to a filename. Each line in this file is one test
	 * case. Each test case will contain an integer n < 4,294,967,295. Assume
	 * each test case will always have an answer and that it is computable with
	 * less than 1000 iterations (additions) For each line of input, generate a
	 * line of output which is the number of iterations (additions) to compute
	 * the palindrome and the resulting palindrome. (they should be on one line
	 * and separated by a single space character)
	 */

	public static void main(String args[]) throws IOException {

		for (String input : args) {
			if (input.toString().equalsIgnoreCase("none")) {
				generateRandomNumberFile();
				inputFile(RANDOM_NUMBERS_FILE);
			} else {
				inputFile(input.toString());
			}
		}

	}

	private static void inputFile(String userFile) {
		try {
			checkExists(userFile);
		} catch (FileNotFoundException e) {
			generateRandomNumberFile();

		}
	}

	private static void generateRandomNumberFile() {

		Writer bufferWritter = null;

		try {

			FileOutputStream fos = new FileOutputStream(
					"/home/ubuntu/Desktop/aol1.txt");
			OutputStreamWriter osw = new OutputStreamWriter(fos, "utf-8");
			bufferWritter = new BufferedWriter(osw);

			for (long i = 0; i <= 10000; i++) {

				bufferWritter.write(Long.toString(randomNumber(i, MAX_NUMBER))+"\n");
			}

		} catch (IOException exception) {
			exception.printStackTrace();

		} finally {
			try {
				bufferWritter.close();
			} catch (Exception ex) {
			}
		}

	}

	private static long randomNumber(long startNumber, long maxNumber) {
		Random rand = new Random();
		
	
		long number;
		long generatedLong;
		do {
			
			 generatedLong = rand.nextLong();
			 number = (generatedLong % (maxNumber - startNumber))
					+ startNumber;
		} while (generatedLong < 0);
		return number;
	}

	private static void checkExists(String randomNumbersFile)
			throws FileNotFoundException {

		File file = new File(randomNumbersFile);

		BufferedReader br = new BufferedReader(new FileReader(file));

		String line = null;

		try {
			while ((line = br.readLine()) != null) {

				long number = Long.parseLong(line);

				if (performCheck(number)) {

					additionSequence(number, reverseNumber(number));
				}

			}
		} catch (NumberFormatException | IOException e) {
			e.printStackTrace();
		}

	}

	private static void additionSequence(long number, long reverseNumber) {
		long palindrome, iterator = 1;

		long origNumber = number;

		while (iterator < 1000) {

			palindrome = number + reverseNumber;
			if (palindrome == reverseNumber(palindrome)) {
				System.out.println(origNumber + " " + iterator + " "
						+ palindrome);
				break;
			} else {
				number = palindrome;
				reverseNumber = reverseNumber(palindrome);
			}

			iterator++;
		}

	}

	private static long reverseNumber(long number) {
		long result = 0;

		do {
			long lastDigit = number % 10;
			result = result * 10 + lastDigit;
			number = number / 10;
		} while (number > 0);

		return result;
	}

	private static boolean performCheck(long number) {
		if ((number < 0) && number == 196) {
			return false;
		}

		return true;
	}

}
